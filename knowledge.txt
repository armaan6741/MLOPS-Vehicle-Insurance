-template file creates base structure of project by adding necessary files
-create setup.py file and pyproject.toml
-add requirements and remove -e .

-CONDA 
    
    -Install conda and add to scripts and anaconda3 to path
    -conda init on conda prompt for cmd and powershell
    -conda env list: shows list of environments
    -create an environment using command in projectflow.txt
    -conda activate env
    -pip install -r requirements.txt

-MONGO DB

    -login and create organisation
    -create a project
    -create a cluster
        - Username : armaanhaider23_db_user
        - password : lhoqTXwdv9mnl3m5
    -create database user and close
    -go to network access and add ip address (0.0.0.0/0)
    -go back to project
    -add connection string and select python 3.6+ copy application string
        -mongodb+srv://armaanhaider23_db_user:<db_password>@cluster0.pesq13m.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

-after pip list, add -e . back
-run pip install -r requirements.txt
-src will be installed
-git add, commit, Push

-create notebook folder and load kaggle dataset
-create mongoDB_demo.ipynb file >> select vehicle kernel   

-MONGO ipynb

    -read csv data and convert to dictionary
    -create mongodb code for it, add connection string and password (add to .gitgnore before pushing)
    -create and client and push to mongodb

-LOGGING FILE
    -in src/logger.__init__.py 
    -create log constant
        -create log folder, log file format, max log file size, backup count
    -create log path
        -create log dir path(if exists) and log file path
    -create def configure_logger()
        -create custom logger
        -define format
        -create file handler
        -create console handler
        -add loggers to handler
    -test demo file for log messages
        -debug
        -info
        -warning
        -error
        -critical

-EXCEPTION FILE
    -create def error_message_detail()
        -extracts traceback, filename, line number, error message
    -creat MyException(Excpetion) class

-EXP-NOTEBOOK.ipynb
    -read data.csv
    -EDA - shape,isnull,info,describe,value_counts
    -Visuals
        -barplot(Response,Gender,DL)
        -hist
        -group by
        -scatterplot(Age vs Annual Premium)
        -catplot(gender vs response, gender vs DL, Vehicle damage)
        -countplot(Previous Insured, Vehicle Age, Vehicle Damage)
    -Preprocessing
        -divide num_feat, categorical_feat
        -map gender with 0,1
        -get dummies for categorical_feat and convert to int
        -standard scaler(num_feat), minmaxscaler(Annual Premium)
        -train_test_split(drop response)
    -Model Trainer
        -Random Forest
            -choose best hyperparamters (entropy,max_depth,min_samples,min_samples_leaf,n_estimators)
        -save in pickle file
    -Model Evaluation
        -classification report


